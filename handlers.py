import asyncio
from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, FSInputFile, CallbackQuery
from aiogram.filters import CommandStart, Command
from fastapi_cli.cli import callback
import database as db
from cfg import admins
import keyboard as kb
from Ai3D import generate3d
from aiogram.fsm.state import State, StatesGroup, default_state
from aiogram.types import CallbackQuery, Message, InlineKeyboardButton
from aiocryptopay import Networks, AioCryptoPay
from aiogram.utils.keyboard import InlineKeyboardBuilder
from cfg import CrypToken

client = AioCryptoPay(token=CrypToken) #if use testnet = network=Networks.TEST_NET


class priceT(StatesGroup):
    num = State()
class startTokens(StatesGroup):
    num = State()
class priceG(StatesGroup):
    num = State()
class numBuyTokens(StatesGroup):
    num = State()


router = Router()

@router.message(CommandStart())
async def start(message:Message):
    await message.answer(text='–ø—Ä–∏–≤–µ—Ç, —ç—Ç–æ –±–æ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ 3–¥ –º–æ–¥–µ–ª–µ–π –∏–∑ –≤–∞—à–∏—Ö —Ñ–æ—Ç–æ',reply_markup=kb.StartKb)
    id = message.from_user.id
    username = message.from_user.username
    token = await db.get_Start_tokens()
    await db.add_to_database_users(telegram_id=id,username=username,tokens=token)


@router.message(Command('admin'))
async def admin(message:Message):
    if message.from_user.id == admins:
        await message.answer(text='–ø—Ä–∏–≤–µ—Ç –∞–¥–º–∏–Ω', reply_markup=kb.settings)

@router.callback_query(F.data == 'settings')
async def settings(message: Message):
    await message.answer(text="–Ω–∞—Å—Ç—Ä–æ–π–∫–∏", reply_markup=kb.settings)

@router.callback_query(F.data == 'price1token')
async def price1token(message: Message, state: FSMContext):
    await state.set_state(priceT.num)
    await message.answer(text='–≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É 100 —Ç–æ–∫–µ–Ω–Ω–æ–≤')
@router.message(priceT.num)
async def price1token_add(message:Message, state:FSMContext):
    await state.update_data(num=message.text)
    data = await state.get_data()
    await db.add_pricet(data['num'])
    await message.answer(text=f'—É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ')
    await state.clear()

@router.callback_query(F.data == 'startTokens')
async def starttokens(message: Message, state: FSMContext):
    await state.set_state(startTokens.num)
    await message.answer(text='–≤–≤–µ–¥–∏—Ç–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤')
@router.message(startTokens.num)
async def starttokens_add(message:Message, state:FSMContext):
    await state.update_data(num=message.text)
    data = await state.get_data()
    await db.add_startt(data['num'])
    await message.answer(text=f'—É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ')
    await state.clear()
@router.callback_query(F.data == 'priceGen')
async def pricegen(message: Message, state: FSMContext):
    await state.set_state(priceG.num)
    await message.answer(text='–≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É 1 –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏')
@router.message(priceG.num)
async def pricegen_add(message:Message, state:FSMContext):
    await state.update_data(num=message.text)
    data = await state.get_data()
    await db.add_priceg(data['num'])
    await message.answer(text=f'—É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ')
    await state.clear()



@router.message(F.text == '–ø—Ä–æ—Ñ–∏–ª—å')
async def profile(message: Message):
    await db.get_price100()
    name =  message.from_user.username
    idus =  message.from_user.id
    token = await db.get_tokens(id=idus)
    await message.answer(text=f'–∏–º—è:  {name} \n —Ç–æ–∫–µ–Ω—ã: {token}')



@router.message(F.text == '–ø–æ–∫—É–ø–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤')
async def buytoken(message: Message):
    sto = await db.get_price100()
    await message.answer(text=f'–≤—ã–±–µ—Ä–µ—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ \n 100 - {sto}$ \n 500 - {sto * 5}$ \n 1000 - {sto * 10}$', reply_markup=kb.numtokens)

@router.callback_query(F.data == '100')
async def buy100(callback1: CallbackQuery):
    await callback1.answer('üíµ')
    amount = await db.get_price100()
    invoice = await client.create_invoice(asset='USDT', amount=amount)
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É", url=invoice.bot_invoice_url))
    builder.add(InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"CHECK1|{invoice.invoice_id}"))
    builder.adjust(1)
    await callback1.message.answer("–û–ø–ª–∞—Ç–∏—Ç–µ –∑–∞–∫–∞–∑ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ", reply_markup=builder.as_markup())
@router.callback_query(F.data.startswith("CHECK1|"))
async def check_invoice100(call1: CallbackQuery):
    invoice_id = int(call1.data.split("|")[1])
    invoice = await client.get_invoices(invoice_ids=invoice_id)
    if invoice.status == "paid":
        await call1.message.delete()
        ID = call1.from_user.id
        await db.add100tokens(ID)
        await call1.message.answer("—Ç–æ–∫–µ–Ω—ã –∑–∞—á–∏—Å–ª–µ–Ω—ã")  # ! –≤—ã–¥–∞—á–∞ —Ç–æ–≤–∞—Ä–∞
    else:
        await call1.answer("–û–ø–ª–∞—Ç–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞!")

@router.callback_query(F.data == '500')
async def buy500(callback2: CallbackQuery):
    await callback2.answer('üíµ')
    amount = await db.get_price100()
    invoice = await client.create_invoice(asset='USDT', amount=amount*5)
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É", url=invoice.bot_invoice_url))
    builder.add(InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"CHECK2|{invoice.invoice_id}"))
    builder.adjust(1)
    await callback2.message.answer("–û–ø–ª–∞—Ç–∏—Ç–µ –∑–∞–∫–∞–∑ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ", reply_markup=builder.as_markup())
@router.callback_query(F.data.startswith("CHECK2|"))
async def check_invoice500(call2: CallbackQuery):
    invoice_id = int(call2.data.split("|")[1])
    invoice = await client.get_invoices(invoice_ids=invoice_id)
    if invoice.status == "paid":
        await call2.message.delete()
        ID = call2.from_user.id
        await db.add500tokens(ID)
        await call2.message.answer("—Ç–æ–∫–µ–Ω—ã –∑–∞—á–∏—Å–ª–µ–Ω—ã")  # ! –≤—ã–¥–∞—á–∞ —Ç–æ–≤–∞—Ä–∞
    else:
        await call2.answer("–û–ø–ª–∞—Ç–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞!")

@router.callback_query(F.data == '1000')
async def buy1000(callback3: CallbackQuery):
    await callback3.answer('üíµ')
    amount = await db.get_price100()
    invoice = await client.create_invoice(asset='USDT', amount=amount*10)
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É", url=invoice.bot_invoice_url))
    builder.add(InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"CHECK3|{invoice.invoice_id}"))
    builder.adjust(1)
    await callback3.message.answer("–û–ø–ª–∞—Ç–∏—Ç–µ –∑–∞–∫–∞–∑ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ", reply_markup=builder.as_markup())
@router.callback_query(F.data.startswith("CHECK3|"))
async def check_invoice1000(call3: CallbackQuery):
    invoice_id = int(call3.data.split("|")[1])
    invoice = await client.get_invoices(invoice_ids=invoice_id)
    if invoice.status == "paid":
        await call3.message.delete()
        ID = call3.from_user.id
        await db.add1000tokens(ID)
        await call3.message.answer("—Ç–æ–∫–µ–Ω—ã –∑–∞—á–∏—Å–ª–µ–Ω—ã")  # ! –≤—ã–¥–∞—á–∞ —Ç–æ–≤–∞—Ä–∞
    else:
        await call3.answer("–û–ø–ª–∞—Ç–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞!")



@router.message(F.text == '–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π')
async def genanswer(message: Message):
    await message.answer(text='–¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤—Ç–µ –≤–∞—à–µ —Ñ–æ—Ç–æ –≤ –±–æ—Ç–∞')




@router.message(F.photo)
async def GetPhoto(message:Message):
    tokensuser = await db.get_tokens(message.from_user.id)
    pricegen = await db.get_pricegen()
    if tokensuser >= pricegen:
        await db.buygen(message.from_user.id)
        from run import bot
        photo = message.photo[-1]
        file_info = await bot.get_file(photo.file_id)
        file_path = file_info.file_path
        save_path = f"userPhoto/{photo.file_id}.jpg"
        await bot.download_file(file_path, save_path)
        tokensuser2 = await db.get_tokens(message.from_user.id)
        await message.answer(text=f'—Ñ–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –æ–∂–∏–¥–∞–π—Ç–µ \n —É –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {tokensuser2} —Ç–æ–∫–µ–Ω–æ–≤')
        path3d = str(await generate3d(save_path))
        filename = FSInputFile(path3d).filename
        await message.answer_document(document=FSInputFile(path3d), caption='–≤–∞—à —Ñ–∞–π–ª', reply_markup=await kb.CheckModel(filename))
    else:
        needtokens = pricegen - tokensuser
        await message.answer(text=f'—É –≤–∞—Å {tokensuser} —Ç–æ–∫–µ–Ω–æ–≤ \n –¥–ª—è –æ–ø–ª–∞—Ç—ã –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç {needtokens} —Ç–æ–∫–µ–Ω–æ–≤ \n –≤—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –∏—Ö –Ω–∏–∂–µ', reply_markup=kb.numtokens)